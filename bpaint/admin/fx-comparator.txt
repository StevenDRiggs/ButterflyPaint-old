@bp.route('/db/add', methods=['GET', 'POST'])
def db_add():
    form = AddToDatabaseForm()
    if request.method == 'POST':
        if form.validate_on_submit():
            from bpaint import app, db, uploads
            from bpaint.models import Color
            record = form.data
            image = record.pop('swatch')
            image.filename = str(getrandbits(16)) + secure_filename(image.filename)
            with open(os.path.join(app.config['UPLOAD_FOLDER'], image.filename), 'w'):
                image.save(os.path.join(app.config['UPLOAD_FOLDER'], image.filename))
            record.pop('csrf_token')
            record.pop('submit')
            record['swatch'] = os.path.join(url_for('base.static', filename=f'images/{image.filename}'))
            color = Color(**record)
            db.session.add(color)
            db.session.commit()
            flash(f"{record['name']} successfully added!")
            return redirect(url_for('admin.db_add'))
        else:
            return 'Error:\n' + str(form.errors)
    return render_template('admin/db_add.html', form=form)


@bp.route('/db/update', methods=['GET', 'POST'])
def db_update(rec_id=None):
    form = UpdateForm()
    if request.method == 'POST':
        if form.validate_on_submit():
            if request.form.get('update'):
                from bpaint import db
                from bpaint.models import Color
                formdata = dict(request.form)
                formdata.pop('csrf_token')
                formdata.pop('submit')
                record = formdata.pop('update')
                db_rec = Color.query.filter_by(id=record).first()
                for k, v in formdata.items():
                    setattr(db_rec, k, v)
                db.session.add(db_rec)
                db.session.commit()
                flash('Update Successful!')
                return redirect(url_for('admin.db_update'))
            else:
                flash('Please choose a record to update.')
                return redirect(url_for('admin.db_update'))
        else:
            return 'Error:\n' + str(form.errors)
    records = load_db()
    form.update.choices = []
    for record in records:
        form.update.choices.append((record.id, record.name))
    return render_template('admin/db_update.html', form=form)


class AddToDatabaseForm(FlaskForm):
    medium = StringField('medium', validators=[DataRequired(), Length(min=2, max=2)])
    name = StringField('name', validators=[DataRequired(), Length(max=40)])
    pure = BooleanField('pure')
    recipe = TextAreaField('recipe', validators=[DataRequired()])
    swatch = FileField('swatch', validators=[FileAllowed(uploads)])

    submit = SubmitField('submit')


class UpdateForm(AddToDatabaseForm):
    update = SelectField('')
    submit = SubmitField('submit')


class DeleteForm(FlaskForm):
    delete = SelectField('delete')


db_add.html
{% extends 'admin/db_home.html' %}

{% block main_content %}
  <form action="" autocomplete="on" method="post" name="db-add" enctype="multipart/form-data">
    <div hidden>
      {{ form.csrf_token }}
    </div>
    {% for field in form if field.name != 'csrf_token' %}
      <div>
        {{ field.label() }}
        {{ field() }}
        {% for error in field.errors %}
          <div class="error">{{ error }}</div>
        {% endfor %}
      </div>
    {% endfor %}
  </form>
  <script src="{{ url_for('admin.static', filename='javascript/pure.js') }}"></script>
{% endblock main_content %}


